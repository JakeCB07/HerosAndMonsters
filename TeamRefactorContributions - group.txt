General refactorings
#1 Implemented the Strategy pattern for the attacks								(JACOB BURTS)
#2 Programmed to an Interface using an attack behavior, Monster/Hero , HealBehavior interfaces			(JACOB BURTS, MARK CAPKA)
#3 encapsulation declared data private where possible and utilized getters and setters(lots of them)		(MARK CAPKA, JACOB WATKINS)
#4 changed to keyboard from a class to a scanner (deleted Keyboard class -> utilized Scanner import)		(JACOB WATKINS)
#5 implemented a factory to produce heros and monsters		(& weapons, however, not fully implemented yet)	(MARK CAPKA)
#6 properly utilized inheritance moved methods that all have same behavior from sub-class to parent		(Jacob Watkins, Mark Capka)
#7 deleted unused method and data (Comparable, duplicate methods from inheritance)`				(Capka, Watkins, Burts)
#8 deleted comments that tell you what and not why 								(Capka, Watkins, Burts)
#9 created a game manager class to choose the hero, create a monster and manage all the players options		(Jacob Burts)
#10 There were many more minor refactors, but this covers the bulk of it. Below are some details of how we parcelled things out as well.


****Note there are a few very minor errors (for example, I saw a math error that wasn't returning the correct amount of health (i think due to a minHeal vs maxHeal vs the damage passed to subtractHealth(damage);
	**another error with an Ogre doing damage to himself. We'll continue to polish as we go along but the minutiae isn't as important as the big picture of our refactors

**we do have a few things that (seem) unimplemented, that's because they are... for example the AttackFactory is there and built, however, I didn't have a chance to link it in, although it will be ready for the final project



Jacob Watkins: 

#1 properly utilized inheritance by deleting methods that exist already in the parant class in the sub class
#2 Improved incapsulation by switching all data to private and using getters and setters
#3 Created a keyboard Scanner
#4 deleted comments
#5 deleted unsused methods
#6 moved methods to parant class that were being used in muliple sub classes
#7 renamed methods


Jacob Burts: 

1. Stored the stats for the Sorcerer, Warrior, Theif, Skeleton, Ogre, and Gremlin
   in order to eliminate some magic numbers as well as improve readability. 
2. Employed the Strategy Pattern to encapsulate the attack behaviors of
   Heros and Monsters to improve maintainability as well as extendability.
   Also got rid of duplicate code.
3. Employed the Strategy Pattern again to healing behaviors to improve maintainability
   and extendability. This also improved readability and eliminated duplicate code.
4. Deleted code that served no purpose. Main offender being the Comparable interface being 
   implemented for no reason.
5. Deleted extranious comments. If the code is intent revealing, theres no need for all
   these comments.
6. Added a GameManger to clean up the main method as well as encapsulate "game behaviors."
7. Created a Hero and Monster factory that encapsulations DungeonCharacter creation.
8. Updated the outdated Keyboard system to Scanner. 

Mark Capka
Mark's Refactors: 
1. Getters and setters -> subclass levels (required by interfaces), changed visibility as I went but not throughout encapsulation (I think Jacob did this)
2. refactored Dungeon Character to abstract factory (abstract character factory -> hero/Monster factory)
	2.5. refactored instead back to simple factory (a separate hero factory and a monster factory) for refactor assignment might change back for final
3.Hero/Monster interfaces    **DungeonCharacterInterface isn't necessary so can be removed since we are building things at the hero/monster level
4. Scanners instead of keyboards
5. Pulling together everyone's code
6. NOTE* Our UML is missing the HeroInterface and MonsterINterface that is my bad as I added those at the end after I had already packaged up our UML diagram, so please only punish me (should you even see the need to ;) )

Several things for the final as well (made an AttackFactory,,  for the different types of weapons - NOT INTEGRATED UNTIL FINAL)



**
IF we want to add additional things/refactors/finalAdditions:
enums for subclasses
combine parameters into objects (if we do this I think should I revert back to abstract factory -> i already have this code written, i just reverted it back to pre-combination since we did factories differently -> might do for final but not for refactor)
Decorator pattern
Singleton -> limit the character to only holding one weapon at a time (or something -> probably not necessary though)
Template method -> 
FlyWeight (I think) for  AttackFactory

